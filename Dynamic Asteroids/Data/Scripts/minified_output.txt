using VRageMath;using ProtoBuf;using DynamicAsteroids.Data.Scripts.DynamicAsteroids.AsteroidEntities;namespace DynamicAsteroids.Data.Scripts.DynamicAsteroids{[ProtoContract]public class AsteroidNetworkMessageContainer{[ProtoMember(2)]public AsteroidNetworkMessage[]Messages{get;set;}public AsteroidNetworkMessageContainer(){}public AsteroidNetworkMessageContainer(AsteroidNetworkMessage[]messages){Messages=messages;}}[ProtoContract]public struct AsteroidNetworkMessage{[ProtoMember(1)]public double PosX;[ProtoMember(2)]public double PosY;[ProtoMember(3)]public double PosZ;[ProtoMember(4)]public float Size;[ProtoMember(5)]public double VelX;[ProtoMember(6)]public double VelY;[ProtoMember(7)]public double VelZ;[ProtoMember(8)]public double AngVelX;[ProtoMember(9)]public double AngVelY;[ProtoMember(10)]public double AngVelZ;[ProtoMember(11)]public int Type;[ProtoMember(12)]public bool IsSubChunk;[ProtoMember(13)]public long EntityId;[ProtoMember(14)]public bool IsRemoval;[ProtoMember(15)]public bool IsInitialCreation;[ProtoMember(16)]public float RotX;[ProtoMember(17)]public float RotY;[ProtoMember(18)]public float RotZ;[ProtoMember(19)]public float RotW;public AsteroidNetworkMessage(Vector3D position,float size,Vector3D initialVelocity,Vector3D angularVelocity,AsteroidType type,bool isSubChunk,long entityId,bool isRemoval,bool isInitialCreation,Quaternion rotation){PosX=position.X;PosY=position.Y;PosZ=position.Z;Size=size;VelX=initialVelocity.X;VelY=initialVelocity.Y;VelZ=initialVelocity.Z;AngVelX=angularVelocity.X;AngVelY=angularVelocity.Y;AngVelZ=angularVelocity.Z;Type=(int)type;IsSubChunk=isSubChunk;EntityId=entityId;IsRemoval=isRemoval;IsInitialCreation=isInitialCreation;RotX=rotation.X;RotY=rotation.Y;RotZ=rotation.Z;RotW=rotation.W;}public Vector3D GetPosition()=>new Vector3D(PosX,PosY,PosZ);public Vector3D GetVelocity()=>new Vector3D(VelX,VelY,VelZ);public Vector3D GetAngularVelocity()=>new Vector3D(AngVelX,AngVelY,AngVelZ);public AsteroidType GetType()=>(AsteroidType)Type;public Quaternion GetRotation()=>new Quaternion(RotX,RotY,RotZ,RotW);}}﻿using Sandbox.ModAPI;using System.Collections.Concurrent;using System.Collections.Generic;using VRage.Game.ModAPI;using VRage.ModAPI;using VRageMath;using System.Linq;using System;using Sandbox.Game.Entities;using VRage.Game.Entity;using DynamicAsteroids.Data.Scripts.DynamicAsteroids.AsteroidEntities;using RealGasGiants;using System.IO;namespace DynamicAsteroids.Data.Scripts.DynamicAsteroids{public class AsteroidZone{public Vector3D Center{get;set;}public double Radius{get;set;}public int AsteroidCount{get;set;}public AsteroidZone(Vector3D center,double radius){Center=center;Radius=radius;AsteroidCount=0;}public bool IsPointInZone(Vector3D point){return Vector3D.DistanceSquared(Center,point)<=Radius*Radius;}}public class AsteroidSpawner{private ConcurrentBag<AsteroidEntity>_asteroids;private bool _canSpawnAsteroids=false;private DateTime _worldLoadTime;private Random rand;private List<AsteroidState>_despawnedAsteroids=new List<AsteroidState>();private ConcurrentQueue<AsteroidNetworkMessage>_networkMessages=new ConcurrentQueue<AsteroidNetworkMessage>();private ConcurrentDictionary<long,AsteroidZone>playerZones=new ConcurrentDictionary<long,AsteroidZone>();private ConcurrentDictionary<long,PlayerMovementData>playerMovementData=new ConcurrentDictionary<long,PlayerMovementData>();private ConcurrentQueue<AsteroidEntity>_updateQueue=new ConcurrentQueue<AsteroidEntity>();private const int UpdatesPerTick=50;private RealGasGiantsApi _realGasGiantsApi;public AsteroidSpawner(RealGasGiantsApi realGasGiantsApi){_realGasGiantsApi=realGasGiantsApi;}private class PlayerMovementData{public Vector3D LastPosition{get;set;}public DateTime LastUpdateTime{get;set;}public double Speed{get;set;}}public void Init(int seed){if(!MyAPIGateway.Session.IsServer)return;Log.Info("Initializing AsteroidSpawner");_asteroids=new ConcurrentBag<AsteroidEntity>();_worldLoadTime=DateTime.UtcNow;rand=new Random(seed);AsteroidSettings.Seed=seed;}public void SaveAsteroidState(){if(!MyAPIGateway.Session.IsServer||!AsteroidSettings.EnablePersistence)return;var asteroidStates=_asteroids.Select(asteroid=>new AsteroidState{Position=asteroid.PositionComp.GetPosition(),Size=asteroid.Size,Type=asteroid.Type,EntityId=asteroid.EntityId}).ToList();asteroidStates.AddRange(_despawnedAsteroids);var stateBytes=MyAPIGateway.Utilities.SerializeToBinary(asteroidStates);using(BinaryWriter writer=MyAPIGateway.Utilities.WriteBinaryFileInLocalStorage("asteroid_states.dat",typeof(AsteroidSpawner))){writer.Write(stateBytes,0,stateBytes.Length);}_updateQueue=new ConcurrentQueue<AsteroidEntity>();foreach(AsteroidEntity asteroid in _asteroids){_updateQueue.Enqueue(asteroid);}}public void LoadAsteroidState(){if(!MyAPIGateway.Session.IsServer||!AsteroidSettings.EnablePersistence)return;_asteroids=new ConcurrentBag<AsteroidEntity>();if(!MyAPIGateway.Utilities.FileExistsInLocalStorage("asteroid_states.dat",typeof(AsteroidSpawner)))return;byte[]stateBytes;using(BinaryReader reader=MyAPIGateway.Utilities.ReadBinaryFileInLocalStorage("asteroid_states.dat",typeof(AsteroidSpawner))){stateBytes=reader.ReadBytes((int)reader.BaseStream.Length);}var asteroidStates=MyAPIGateway.Utilities.SerializeFromBinary<List<AsteroidState>>(stateBytes);foreach(AsteroidState state in asteroidStates){if(_asteroids.Any(a=>a.EntityId==state.EntityId)){Log.Info($"Skipping duplicate asteroid with ID {state.EntityId}");continue;}AsteroidEntity asteroid=AsteroidEntity.CreateAsteroid(state.Position,state.Size,Vector3D.Zero,state.Type);asteroid.EntityId=state.EntityId;_asteroids.Add(asteroid);MyEntities.Add(asteroid);_updateQueue.Enqueue(asteroid);}}private void LoadAsteroidsInRange(Vector3D playerPosition,AsteroidZone zone){int skippedCount=0;int respawnedCount=0;List<Vector3D>skippedPositions=new List<Vector3D>();List<Vector3D>respawnedPositions=new List<Vector3D>();foreach(AsteroidState state in _despawnedAsteroids.ToArray()){if(!zone.IsPointInZone(state.Position))continue;bool tooClose=_asteroids.Any(a=>Vector3D.DistanceSquared(a.PositionComp.GetPosition(),state.Position)<AsteroidSettings.MinDistanceFromPlayer*AsteroidSettings.MinDistanceFromPlayer);if(tooClose){skippedCount++;skippedPositions.Add(state.Position);continue;}respawnedCount++;respawnedPositions.Add(state.Position);AsteroidEntity asteroid=AsteroidEntity.CreateAsteroid(state.Position,state.Size,Vector3D.Zero,state.Type);asteroid.EntityId=state.EntityId;_asteroids.Add(asteroid);AsteroidNetworkMessage message=new AsteroidNetworkMessage(state.Position,state.Size,Vector3D.Zero,Vector3D.Zero,state.Type,false,asteroid.EntityId,false,true,Quaternion.Identity);var messageBytes=MyAPIGateway.Utilities.SerializeToBinary(message);MyAPIGateway.Multiplayer.SendMessageToOthers(32000,messageBytes);_despawnedAsteroids.Remove(state);_updateQueue.Enqueue(asteroid);}if(skippedCount>0){Log.Info($"Skipped respawn of {skippedCount} asteroids due to proximity to other asteroids or duplicate ID.");}if(respawnedCount>0){Log.Info($"Respawned {respawnedCount} asteroids at positions: {string.Join(", ",respawnedPositions.Select(p=>p.ToString()))}");}}public void Close(){if(!MyAPIGateway.Session.IsServer)return;SaveAsteroidState();Log.Info("Closing AsteroidSpawner");_asteroids=null;}public void AssignZonesToPlayers(){List<IMyPlayer>players=new List<IMyPlayer>();MyAPIGateway.Players.GetPlayers(players);Dictionary<long,AsteroidZone>updatedZones=new Dictionary<long,AsteroidZone>();foreach(IMyPlayer player in players){Vector3D playerPosition=player.GetPosition();PlayerMovementData data;if(playerMovementData.TryGetValue(player.IdentityId,out data)){if(AsteroidSettings.DisableZoneWhileMovingFast&&data.Speed>AsteroidSettings.ZoneSpeedThreshold){Log.Info($"Skipping zone creation for player {player.DisplayName} due to high speed: {data.Speed} m/s.");continue;}}AsteroidZone existingZone;if(playerZones.TryGetValue(player.IdentityId,out existingZone)){if(existingZone.IsPointInZone(playerPosition)){updatedZones[player.IdentityId]=existingZone;}else{AsteroidZone newZone=new AsteroidZone(playerPosition,AsteroidSettings.ZoneRadius);updatedZones[player.IdentityId]=newZone;}}else{AsteroidZone newZone=new AsteroidZone(playerPosition,AsteroidSettings.ZoneRadius);updatedZones[player.IdentityId]=newZone;}}playerZones=new ConcurrentDictionary<long,AsteroidZone>(updatedZones);}public void MergeZones(){List<AsteroidZone>mergedZones=new List<AsteroidZone>();foreach(AsteroidZone zone in playerZones.Values){bool merged=false;foreach(AsteroidZone mergedZone in mergedZones){double distance=Vector3D.Distance(zone.Center,mergedZone.Center);double combinedRadius=zone.Radius+mergedZone.Radius;if(!(distance<=combinedRadius))continue;Vector3D newCenter=(zone.Center+mergedZone.Center)/2;double newRadius=Math.Max(zone.Radius,mergedZone.Radius)+distance/2;mergedZone.Center=newCenter;mergedZone.Radius=newRadius;mergedZone.AsteroidCount+=zone.AsteroidCount;merged=true;break;}if(!merged){mergedZones.Add(new AsteroidZone(zone.Center,zone.Radius){AsteroidCount=zone.AsteroidCount});}}playerZones=new ConcurrentDictionary<long,AsteroidZone>();List<IMyPlayer>players=new List<IMyPlayer>();MyAPIGateway.Players.GetPlayers(players);foreach(AsteroidZone mergedZone in mergedZones){foreach(IMyPlayer player in players){if(!mergedZone.IsPointInZone(player.GetPosition()))continue;playerZones[player.IdentityId]=mergedZone;break;}}}public void UpdateZones(){List<IMyPlayer>players=new List<IMyPlayer>();MyAPIGateway.Players.GetPlayers(players);Dictionary<long,AsteroidZone>updatedZones=new Dictionary<long,AsteroidZone>();foreach(IMyPlayer player in players){Vector3D playerPosition=player.GetPosition();PlayerMovementData data;if(playerMovementData.TryGetValue(player.IdentityId,out data)){if(AsteroidSettings.DisableZoneWhileMovingFast&&data.Speed>AsteroidSettings.ZoneSpeedThreshold){Log.Info($"Skipping zone update for player {player.DisplayName} due to high speed: {data.Speed} m/s.");continue;}}bool playerInZone=false;foreach(AsteroidZone zone in playerZones.Values){if(!zone.IsPointInZone(playerPosition))continue;playerInZone=true;break;}if(playerInZone)continue;AsteroidZone newZone=new AsteroidZone(playerPosition,AsteroidSettings.ZoneRadius);updatedZones[player.IdentityId]=newZone;}foreach(var kvp in playerZones){if(players.Any(p=>kvp.Value.IsPointInZone(p.GetPosition()))){updatedZones[kvp.Key]=kvp.Value;}}playerZones=new ConcurrentDictionary<long,AsteroidZone>(updatedZones);}private int _spawnIntervalTimer=0;private int _updateIntervalTimer=0;public void UpdateTick(){if(!MyAPIGateway.Session.IsServer)return;AssignZonesToPlayers();MergeZones();UpdateZones();try{List<IMyPlayer>players=new List<IMyPlayer>();MyAPIGateway.Players.GetPlayers(players);if(_updateIntervalTimer>0){_updateIntervalTimer--;}else{UpdateAsteroids(playerZones.Values.ToList());ProcessAsteroidUpdates();_updateIntervalTimer=AsteroidSettings.UpdateInterval;}if(_spawnIntervalTimer>0){_spawnIntervalTimer--;}else{SpawnAsteroids(playerZones.Values.ToList());_spawnIntervalTimer=AsteroidSettings.SpawnInterval;}foreach(IMyPlayer player in players){Vector3D playerPosition=player.GetPosition();AsteroidZone zone;if(playerZones.TryGetValue(player.IdentityId,out zone)){LoadAsteroidsInRange(playerPosition,zone);}}if(AsteroidSettings.EnableLogging)MyAPIGateway.Utilities.ShowNotification($"Active Asteroids: {_asteroids.Count}",1000/60);}catch(Exception ex){Log.Exception(ex,typeof(AsteroidSpawner));}}private void UpdateAsteroids(List<AsteroidZone>zones){int removedCount=0;List<AsteroidEntity>asteroidsToRemove=new List<AsteroidEntity>();foreach(AsteroidEntity asteroid in _asteroids){bool inAnyZone=false;AsteroidZone currentZone=null;foreach(AsteroidZone zone in zones){if(!zone.IsPointInZone(asteroid.PositionComp.GetPosition()))continue;inAnyZone=true;currentZone=zone;break;}if(!inAnyZone){Log.Info($"Removing asteroid at {asteroid.PositionComp.GetPosition()} due to distance from all player zones");asteroidsToRemove.Add(asteroid);removedCount++;}else if(currentZone!=null){foreach(AsteroidZone zone in zones){if(zone!=currentZone&&zone.IsPointInZone(asteroid.PositionComp.GetPosition())){zone.AsteroidCount--;}}currentZone.AsteroidCount++;}}foreach(AsteroidEntity asteroid in asteroidsToRemove){RemoveAsteroid(asteroid);}foreach(AsteroidZone zone in zones){}}private void ProcessAsteroidUpdates(){int updatesProcessed=0;AsteroidEntity asteroid;while(updatesProcessed<UpdatesPerTick&&_updateQueue.TryDequeue(out asteroid)){UpdateAsteroid(asteroid);_updateQueue.Enqueue(asteroid);updatesProcessed++;}}private void UpdateAsteroid(AsteroidEntity asteroid){Vector3D currentPosition=asteroid.PositionComp.GetPosition();bool inAnyZone=false;AsteroidZone currentZone=null;foreach(AsteroidZone zone in playerZones.Values){if(!zone.IsPointInZone(currentPosition))continue;inAnyZone=true;currentZone=zone;break;}if(!inAnyZone){RemoveAsteroid(asteroid);}else{currentZone.AsteroidCount++;}}public void SpawnAsteroids(List<AsteroidZone>zones){int totalSpawnAttempts=0;if(AsteroidSettings.MaxAsteroidCount==0){Log.Info("Asteroid spawning is disabled.");return;}int totalAsteroidsSpawned=0;int totalZoneSpawnAttempts=0;List<Vector3D>skippedPositions=new List<Vector3D>();List<Vector3D>spawnedPositions=new List<Vector3D>();UpdatePlayerMovementData();foreach(AsteroidZone zone in zones){int asteroidsSpawned=0;int zoneSpawnAttempts=0;if(zone.AsteroidCount>=AsteroidSettings.MaxAsteroidsPerZone){continue;}bool skipSpawning=false;List<IMyPlayer>players=new List<IMyPlayer>();MyAPIGateway.Players.GetPlayers(players);foreach(IMyPlayer player in players){Vector3D playerPosition=player.GetPosition();if(!zone.IsPointInZone(playerPosition))continue;PlayerMovementData data;if(!playerMovementData.TryGetValue(player.IdentityId,out data))continue;if(!(data.Speed>1000))continue;Log.Info($"Skipping asteroid spawning for player {player.DisplayName} due to high speed: {data.Speed} m/s.");skipSpawning=true;break;}if(skipSpawning){continue;}while(zone.AsteroidCount<AsteroidSettings.MaxAsteroidsPerZone&&asteroidsSpawned<10&&zoneSpawnAttempts<AsteroidSettings.MaxZoneAttempts&&totalSpawnAttempts<AsteroidSettings.MaxTotalAttempts){Vector3D newPosition;bool isInRing=false;bool validPosition=false;float ringInfluence=0f;do{newPosition=zone.Center+RandVector()*AsteroidSettings.ZoneRadius;zoneSpawnAttempts++;totalSpawnAttempts++;Log.Info($"Attempting to spawn asteroid at {newPosition} (attempt {totalSpawnAttempts})");if(AsteroidSettings.EnableGasGiantRingSpawning&&_realGasGiantsApi!=null&&_realGasGiantsApi.IsReady){ringInfluence=_realGasGiantsApi.GetRingInfluenceAtPositionGlobal(newPosition);if(ringInfluence>AsteroidSettings.MinimumRingInfluenceForSpawn){validPosition=true;isInRing=true;Log.Info($"Position {newPosition} is within a gas giant ring (influence: {ringInfluence})");}}if(!isInRing){validPosition=IsValidSpawnPosition(newPosition,zones);}}while(!validPosition&&zoneSpawnAttempts<AsteroidSettings.MaxZoneAttempts&&totalSpawnAttempts<AsteroidSettings.MaxTotalAttempts);if(zoneSpawnAttempts>=AsteroidSettings.MaxZoneAttempts||totalSpawnAttempts>=AsteroidSettings.MaxTotalAttempts)break;Vector3D newVelocity;if(!AsteroidSettings.CanSpawnAsteroidAtPoint(newPosition,out newVelocity,isInRing)){Log.Info($"Cannot spawn asteroid at {newPosition}, skipping.");continue;}if(IsNearVanillaAsteroid(newPosition)){Log.Info($"Position {newPosition} is near a vanilla asteroid, skipping.");skippedPositions.Add(newPosition);continue;}if(AsteroidSettings.MaxAsteroidCount!=-1&&_asteroids.Count>=AsteroidSettings.MaxAsteroidCount){Log.Warning($"Maximum asteroid count of {AsteroidSettings.MaxAsteroidCount} reached. No more asteroids will be spawned until existing ones are removed.");return;}if(zone.AsteroidCount>=AsteroidSettings.MaxAsteroidsPerZone){Log.Info($"Zone at {zone.Center} has reached its maximum asteroid count ({AsteroidSettings.MaxAsteroidsPerZone}). Skipping further spawning in this zone.");break;}float spawnChance=isInRing?MathHelper.Lerp(0.1f,1f,ringInfluence)*AsteroidSettings.MaxRingAsteroidDensityMultiplier:1f;if(MainSession.I.Rand.NextDouble()>spawnChance){Log.Info($"Asteroid spawn skipped due to density scaling (spawn chance: {spawnChance})");continue;}AsteroidType type=AsteroidSettings.GetAsteroidType(newPosition);float size=AsteroidSettings.GetAsteroidSize(newPosition);if(isInRing){size*=MathHelper.Lerp(0.5f,1f,ringInfluence);}Quaternion rotation=Quaternion.CreateFromYawPitchRoll((float)MainSession.I.Rand.NextDouble()*MathHelper.TwoPi,(float)MainSession.I.Rand.NextDouble()*MathHelper.TwoPi,(float)MainSession.I.Rand.NextDouble()*MathHelper.TwoPi);AsteroidEntity asteroid=AsteroidEntity.CreateAsteroid(newPosition,size,newVelocity,type,rotation);if(asteroid==null)continue;_asteroids.Add(asteroid);zone.AsteroidCount++;spawnedPositions.Add(newPosition);AsteroidNetworkMessage message=new AsteroidNetworkMessage(newPosition,size,newVelocity,Vector3D.Zero,type,false,asteroid.EntityId,false,true,rotation);_networkMessages.Enqueue(message);asteroidsSpawned++;Log.Info($"Spawned asteroid at {newPosition} with size {size} and type {type}");}totalAsteroidsSpawned+=asteroidsSpawned;totalZoneSpawnAttempts+=zoneSpawnAttempts;}if(!AsteroidSettings.EnableLogging)return;if(skippedPositions.Count>0){Log.Info($"Skipped spawning asteroids due to proximity to vanilla asteroids. Positions: {string.Join(", ",skippedPositions.Select(p=>p.ToString()))}");}if(spawnedPositions.Count>0){Log.Info($"Spawned asteroids at positions: {string.Join(", ",spawnedPositions.Select(p=>p.ToString()))}");}}private void UpdatePlayerMovementData(){List<IMyPlayer>players=new List<IMyPlayer>();MyAPIGateway.Players.GetPlayers(players);foreach(IMyPlayer player in players){Vector3D currentPosition=player.GetPosition();DateTime currentTime=DateTime.UtcNow;PlayerMovementData data;if(playerMovementData.TryGetValue(player.IdentityId,out data)){double distance=Vector3D.Distance(currentPosition,data.LastPosition);double timeElapsed=(currentTime-data.LastUpdateTime).TotalSeconds;double speed=distance/timeElapsed;data.Speed=speed;playerMovementData[player.IdentityId].LastPosition=currentPosition;playerMovementData[player.IdentityId].LastUpdateTime=currentTime;}else{playerMovementData[player.IdentityId]=new PlayerMovementData{LastPosition=currentPosition,LastUpdateTime=currentTime,Speed=0};}}}private bool IsValidSpawnPosition(Vector3D position,List<AsteroidZone>zones){BoundingSphereD sphere=new BoundingSphereD(position,AsteroidSettings.MinDistanceFromPlayer);List<MyEntity>entities=new List<MyEntity>();MyGamePruningStructure.GetAllTopMostEntitiesInSphere(ref sphere,entities,MyEntityQueryType.Both);foreach(MyEntity entity in entities){if(entity is IMyCharacter||entity is IMyShipController){return false;}}if(AsteroidSettings.EnableGasGiantRingSpawning&&_realGasGiantsApi!=null&&_realGasGiantsApi.IsReady){float ringInfluence=_realGasGiantsApi.GetRingInfluenceAtPositionGlobal(position);if(ringInfluence>AsteroidSettings.MinimumRingInfluenceForSpawn){Log.Info($"Valid position in ring: {position}, influence: {ringInfluence}");return true;}}foreach(SpawnableArea area in AsteroidSettings.ValidSpawnLocations){if(!area.ContainsPoint(position))continue;Log.Info($"Valid position in SpawnableArea: {position}");return true;}foreach(AsteroidZone zone in zones){if(!zone.IsPointInZone(position))continue;Log.Info($"Valid position in player zone: {position}");return true;}Log.Info($"Invalid spawn position: {position}");return false;}public void SendNetworkMessages(){AsteroidNetworkMessage message;while(_networkMessages.TryDequeue(out message)){try{var messageBytes=MyAPIGateway.Utilities.SerializeToBinary(message);Log.Info($"Server: Serialized message size: {messageBytes.Length} bytes");MyAPIGateway.Multiplayer.SendMessageToOthers(32000,messageBytes);Log.Info($"Server: Sent message for asteroid ID {message.EntityId}");}catch(Exception ex){Log.Exception(ex,typeof(AsteroidSpawner),"Failed to send network message");}}}private void RemoveAsteroid(AsteroidEntity asteroid){AsteroidEntity removedAsteroid;if(!_asteroids.TryTake(out removedAsteroid))return;if(removedAsteroid.EntityId==asteroid.EntityId){_despawnedAsteroids.Add(new AsteroidState{Position=asteroid.PositionComp.GetPosition(),Size=asteroid.Size,Type=asteroid.Type,EntityId=asteroid.EntityId});AsteroidNetworkMessage removalMessage=new AsteroidNetworkMessage(asteroid.PositionComp.GetPosition(),asteroid.Size,Vector3D.Zero,Vector3D.Zero,asteroid.Type,false,asteroid.EntityId,true,false,Quaternion.Identity);_networkMessages.Enqueue(removalMessage);MyEntities.Remove(asteroid);asteroid.Close();Log.Info($"Server: Removed asteroid with ID {asteroid.EntityId} from _asteroids list and MyEntities");}else{_asteroids.Add(removedAsteroid);}}private bool IsNearVanillaAsteroid(Vector3D position){BoundingSphereD sphere=new BoundingSphereD(position,AsteroidSettings.MinDistanceFromVanillaAsteroids);List<MyEntity>entities=new List<MyEntity>();MyGamePruningStructure.GetAllTopMostEntitiesInSphere(ref sphere,entities,MyEntityQueryType.Static);foreach(MyEntity entity in entities){IMyVoxelMap voxelMap=entity as IMyVoxelMap;if(voxelMap==null||voxelMap.StorageName.StartsWith("mod_"))continue;Log.Info($"Position {position} is near vanilla asteroid {voxelMap.StorageName}");return true;}return false;}private Vector3D RandVector(){var theta=rand.NextDouble()*2.0*Math.PI;var phi=Math.Acos(2.0*rand.NextDouble()-1.0);var sinPhi=Math.Sin(phi);return Math.Pow(rand.NextDouble(),1/3d)*new Vector3D(sinPhi*Math.Cos(theta),sinPhi*Math.Sin(theta),Math.Cos(phi));}}}﻿using DynamicAsteroids.Data.Scripts.DynamicAsteroids.AsteroidEntities;using ProtoBuf;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using VRageMath;[ProtoContract]public class AsteroidState{[ProtoMember(1)]public Vector3D Position{get;set;}[ProtoMember(2)]public float Size{get;set;}[ProtoMember(3)]public AsteroidType Type{get;set;}[ProtoMember(4)]public long EntityId{get;set;}}﻿using System;using System.IO;using DynamicAsteroids.Data.Scripts.DynamicAsteroids.AsteroidEntities;using Sandbox.ModAPI;namespace DynamicAsteroids.Data.Scripts.DynamicAsteroids{internal class Log{private static Log I;private readonly TextWriter _writer;private Log(){var logFileName=MyAPIGateway.Session.IsServer?"DynamicAsteroids_Server.log":"DynamicAsteroids_Client.log";MyAPIGateway.Utilities.DeleteFileInGlobalStorage(logFileName);_writer=MyAPIGateway.Utilities.WriteFileInGlobalStorage(logFileName);_writer.WriteLine($"      Dynamic Asteroids - {(MyAPIGateway.Session.IsServer?"Server":"Client")} Debug Log\n===========================================\n");_writer.WriteLine($"{DateTime.UtcNow:HH:mm:ss}: Logger initialized for {(MyAPIGateway.Session.IsServer?"Server":"Client")}");_writer.Flush();}public static void Info(string message){if(AsteroidSettings.EnableLogging)I?._Log(message);}public static void Warning(string message){if(AsteroidSettings.EnableLogging)I?._Log("WARNING: "+message);}public static void Exception(Exception ex,Type callingType,string prefix=""){if(AsteroidSettings.EnableLogging)I?._LogException(ex,callingType,prefix);}public static void Init(){Close();I=new Log();}public static void Close(){if(I!=null){Info("Closing log writer.");I._writer.Close();}I=null;}private void _Log(string message){_writer.WriteLine($"{DateTime.UtcNow:HH:mm:ss}: {message}");_writer.Flush();}private void _LogException(Exception ex,Type callingType,string prefix=""){if(ex==null){_Log("Null exception! CallingType: "+callingType.FullName);return;}_Log(prefix+$"Exception in {callingType.FullName}! {ex.Message}\n{ex.StackTrace}\n{ex.InnerException}");MyAPIGateway.Utilities.ShowNotification($"{ex.GetType().Name} in Dynamic Asteroids! Check logs for more info.",10000,"Red");}}}﻿using Sandbox.ModAPI;using System;using VRage.Game.Components;using VRage.Input;using VRageMath;using ProtoBuf;using Sandbox.Game.Entities;using VRage.Game.ModAPI;using VRage.Game;using System.Collections.Generic;using VRage.ModAPI;using DynamicAsteroids.Data.Scripts.DynamicAsteroids.AsteroidEntities;using RealGasGiants;using VRage.Utils;namespace DynamicAsteroids.Data.Scripts.DynamicAsteroids{[MySessionComponentDescriptor(MyUpdateOrder.AfterSimulation)]public class MainSession:MySessionComponentBase{public static MainSession I;public Random Rand;private int seed;public AsteroidSpawner _spawner;private int _saveStateTimer;private int _networkMessageTimer;public RealGasGiantsApi RealGasGiantsApi{get;private set;}private int _testTimer=0;public override void LoadData(){I=this;Log.Init();Log.Info("Log initialized in LoadData method.");AsteroidSettings.LoadSettings();seed=AsteroidSettings.Seed;Rand=new Random(seed);RealGasGiantsApi=new RealGasGiantsApi();RealGasGiantsApi.Load();Log.Info("RealGasGiants API loaded in LoadData");if(MyAPIGateway.Session.IsServer){_spawner=new AsteroidSpawner(RealGasGiantsApi);_spawner.Init(seed);if(AsteroidSettings.EnablePersistence){_spawner.LoadAsteroidState();}}MyAPIGateway.Multiplayer.RegisterMessageHandler(32000,OnMessageReceived);MyAPIGateway.Utilities.MessageEntered+=OnMessageEntered;}public override void BeforeStart(){Log.Info($"RealGasGiants API IsReady: {RealGasGiantsApi.IsReady}");}protected override void UnloadData(){try{Log.Info("Unloading data in MainSession");if(MyAPIGateway.Session.IsServer){if(AsteroidSettings.EnablePersistence){_spawner.SaveAsteroidState();}_spawner.Close();}AsteroidSettings.SaveSettings();MyAPIGateway.Multiplayer.UnregisterMessageHandler(32000,OnMessageReceived);MyAPIGateway.Utilities.MessageEntered-=OnMessageEntered;RealGasGiantsApi?.Unload();}catch(Exception ex){Log.Exception(ex,typeof(MainSession),"Error in UnloadData: ");}Log.Close();I=null;}private void OnMessageEntered(string messageText,ref bool sendToOthers){var player=MyAPIGateway.Session.Player;if(player==null||!IsPlayerAdmin(player))return;if(messageText.StartsWith("/dynamicasteroids")||messageText.StartsWith("/dn")){var args=messageText.Split(' ');if(args.Length>1){switch(args[1].ToLower()){case"createspawnarea":double radius;if(args.Length==3&&double.TryParse(args[2],out radius)){CreateSpawnArea(radius);sendToOthers=false;}break;case"removespawnarea":if(args.Length==3){RemoveSpawnArea(args[2]);sendToOthers=false;}break;}}}}private bool IsPlayerAdmin(IMyPlayer player){return MyAPIGateway.Session.OnlineMode==MyOnlineModeEnum.OFFLINE||MyAPIGateway.Session.IsUserAdmin(player.SteamUserId);}private void CreateSpawnArea(double radius){var player=MyAPIGateway.Session.Player;if(player==null)return;var position=player.GetPosition();var name=$"Area_{position.GetHashCode()}";BoundingBoxD boundingBox=new BoundingBoxD(position-new Vector3D(radius),position+new Vector3D(radius));MyPlanet closestPlanet=MyGamePruningStructure.GetClosestPlanet(ref boundingBox);if(closestPlanet!=null){Log.Info($"Cannot create spawn area '{name}' at {position} with radius {radius}: Intersects with a planet.");MyAPIGateway.Utilities.ShowMessage("DynamicAsteroids",$"Cannot create spawn area '{name}' at {position} with radius {radius}: Intersects with a planet.");return;}AsteroidSettings.AddSpawnableArea(name,position,radius);Log.Info($"Created spawn area '{name}' at {position} with radius {radius}");MyAPIGateway.Utilities.ShowMessage("DynamicAsteroids",$"Created spawn area '{name}' at {position} with radius {radius}");}private void RemoveSpawnArea(string name){AsteroidSettings.RemoveSpawnableArea(name);Log.Info($"Removed spawn area '{name}'");MyAPIGateway.Utilities.ShowMessage("DynamicAsteroids",$"Removed spawn area '{name}'");}public override void UpdateAfterSimulation(){try{if(MyAPIGateway.Session.IsServer){_spawner.UpdateTick();if(_saveStateTimer>0){_saveStateTimer--;}else{_spawner.SaveAsteroidState();_saveStateTimer=AsteroidSettings.SaveStateInterval;}if(_networkMessageTimer>0){_networkMessageTimer--;}else{_spawner.SendNetworkMessages();_networkMessageTimer=AsteroidSettings.NetworkMessageInterval;}}if(MyAPIGateway.Session?.Player?.Character!=null&&_spawner._asteroids!=null){Vector3D characterPosition=MyAPIGateway.Session.Player.Character.PositionComp.GetPosition();AsteroidEntity nearestAsteroid=FindNearestAsteroid(characterPosition);if(nearestAsteroid!=null){Vector3D angularVelocity=nearestAsteroid.Physics.AngularVelocity;string rotationString=$"({angularVelocity.X:F2}, {angularVelocity.Y:F2}, {angularVelocity.Z:F2})";string message=$"Nearest Asteroid: {nearestAsteroid.EntityId} ({nearestAsteroid.Type})\nRotation: {rotationString}";if(AsteroidSettings.EnableLogging)MyAPIGateway.Utilities.ShowNotification(message,1000/60);}}if(AsteroidSettings.EnableMiddleMouseAsteroidSpawn&&MyAPIGateway.Input.IsNewKeyPressed(MyKeys.MiddleButton)){if(MyAPIGateway.Session!=null){var position=MyAPIGateway.Session.Player?.GetPosition()??Vector3D.Zero;var velocity=MyAPIGateway.Session.Player?.Character?.Physics?.LinearVelocity??Vector3D.Zero;AsteroidType type=DetermineAsteroidType();AsteroidEntity.CreateAsteroid(position,Rand.Next(50),velocity,type);Log.Info($"Asteroid created at {position} with velocity {velocity}");}}if(++_testTimer>=240){_testTimer=0;TestNearestGasGiant();}}catch(Exception ex){Log.Exception(ex,typeof(MainSession),"Error in UpdateAfterSimulation: ");}}private void TestNearestGasGiant(){if(RealGasGiantsApi==null||!RealGasGiantsApi.IsReady||MyAPIGateway.Session?.Player==null)return;if(!AsteroidSettings.EnableLogging)return;Vector3D playerPosition=MyAPIGateway.Session.Player.GetPosition();MyPlanet nearestGasGiant=FindNearestGasGiant(playerPosition);float ringInfluence=RealGasGiantsApi.GetRingInfluenceAtPositionGlobal(playerPosition);string message;if(nearestGasGiant!=null){var basicInfo=RealGasGiantsApi.GetGasGiantConfig_BasicInfo_Base(nearestGasGiant);if(basicInfo.Item1){double distance=Vector3D.Distance(playerPosition,nearestGasGiant.PositionComp.GetPosition())-basicInfo.Item2;message=$"Nearest Gas Giant:\n"+$"Distance: {distance:N0}m\n"+$"Radius: {basicInfo.Item2:N0}m\n"+$"Color: {basicInfo.Item3}\n"+$"Skin: {basicInfo.Item4}\n"+$"Day Length: {basicInfo.Item5:F2}s\n"+$"Current Ring Influence: {ringInfluence:F3}";}else{message="Failed to get gas giant info";}}else{message=$"Current Ring Influence: {ringInfluence:F3}";}MyAPIGateway.Utilities.ShowNotification(message,4000,"White");}private MyPlanet FindNearestGasGiant(Vector3D position){const double searchRadius=1000000000;MyPlanet nearestGasGiant=null;double nearestDistance=double.MaxValue;var gasGiants=RealGasGiantsApi.GetAtmoGasGiantsAtPosition(position);foreach(var gasGiant in gasGiants){var basicInfo=RealGasGiantsApi.GetGasGiantConfig_BasicInfo_Base(gasGiant);if(!basicInfo.Item1)continue;float gasGiantRadius=basicInfo.Item2;Vector3D gasGiantCenter=gasGiant.PositionComp.GetPosition();double distance=Vector3D.Distance(position,gasGiantCenter)-gasGiantRadius;if(distance<nearestDistance&&distance<=searchRadius){nearestDistance=distance;nearestGasGiant=gasGiant;}}if(nearestGasGiant!=null){}else{}return nearestGasGiant;}private void OnMessageReceived(byte[]message){try{if(message==null||message.Length==0){Log.Info("Received empty or null message, skipping processing.");return;}Log.Info($"Client: Received message of {message.Length} bytes");var asteroidMessage=MyAPIGateway.Utilities.SerializeFromBinary<AsteroidNetworkMessage>(message);if(asteroidMessage.IsRemoval){var asteroid=MyEntities.GetEntityById(asteroidMessage.EntityId)as AsteroidEntity;if(asteroid!=null){MyEntities.Remove(asteroid);asteroid.Close();}else{Log.Info($"Client: Failed to find asteroid with ID {asteroidMessage.EntityId} for removal");}}else{var existingAsteroid=MyEntities.GetEntityById(asteroidMessage.EntityId)as AsteroidEntity;if(existingAsteroid!=null){Log.Info($"Client: Asteroid with ID {asteroidMessage.EntityId} already exists, skipping creation");}else{var asteroid=AsteroidEntity.CreateAsteroid(asteroidMessage.GetPosition(),asteroidMessage.Size,asteroidMessage.GetVelocity(),asteroidMessage.GetType(),asteroidMessage.GetRotation(),asteroidMessage.EntityId);if(asteroid!=null){asteroid.Physics.AngularVelocity=asteroidMessage.GetAngularVelocity();MyEntities.Add(asteroid);}else{Log.Info($"Client: Failed to create asteroid with ID {asteroidMessage.EntityId}");}}}}catch(Exception ex){Log.Exception(ex,typeof(MainSession),"Error processing received message: ");}}private AsteroidEntity FindNearestAsteroid(Vector3D characterPosition){if(_spawner._asteroids==null)return null;AsteroidEntity nearestAsteroid=null;double minDistance=double.MaxValue;foreach(var asteroid in _spawner._asteroids){double distance=Vector3D.DistanceSquared(characterPosition,asteroid.PositionComp.GetPosition());if(distance<minDistance){minDistance=distance;nearestAsteroid=asteroid;}}return nearestAsteroid;}private AsteroidType DetermineAsteroidType(){int randValue=Rand.Next(0,2);return(AsteroidType)randValue;}}}﻿using Sandbox.Game.Entities;using Sandbox.ModAPI;using System;using System.Collections.Generic;using System.Collections.Immutable;using VRage;using VRageMath;namespace RealGasGiants{public class RealGasGiantsApi{private bool _apiInit;private Func<Vector3D,float,Vector3I,string,float,float,float,MyPlanet>_spawnGasGiant;private Func<MyPlanet,string,bool>_setGasGiantConfig_name;private Func<MyPlanet,float,Vector3I,string,float,float,float,bool>_setGasGiantConfig_basicInfo;private Func<MyPlanet,MyTuple<bool,float,Vector3I,string,float>>_getGasGiantConfig_basicInfo_base;private Func<MyPlanet,MyTuple<bool,float,float>>_getGasGiantConfig_basicInfo_gravity;private Func<MyPlanet,float,float,float,bool>_setGasGiantConfig_atmoInfo;private Func<MyPlanet,MyTuple<bool,float,float,float>>_getGasGiantConfig_atmoInfo;private Func<MyPlanet,bool,string,Vector3D,Vector3I,float,float,float,float,float,float,bool,bool>_setGasGiantConfig_ringInfo;private Func<MyPlanet,MyTuple<bool,bool,float,bool>>_getGasGiantConfig_ringInfo_base;private Func<MyPlanet,MyTuple<bool,string,Vector3I,float,float>>_getGasGiantConfig_ringInfo_visual;private Func<MyPlanet,MyTuple<bool,Vector3D,float,float,float>>_getGasGiantConfig_ringInfo_size;private Func<MyPlanet,bool,bool,bool,bool>_setGasGiantConfig_interiorInfo;private Func<MyPlanet,MyTuple<bool,bool,bool,bool>>_getGasGiantConfig_interiorInfo;private Func<MyPlanet,bool,string,float,string,float,bool,string,float,bool>_setGasGiantConfig_resourceInfo;private Func<MyPlanet,MyTuple<bool,bool,string,float,string,float>>_getGasGiantConfig_resourceInfo_planet;private Func<MyPlanet,MyTuple<bool,bool,string,float>>_getGasGiantConfig_resourceInfo_ring;private Func<List<string>>_getGasGiantSkinList;private Func<List<string>>_getGasGiantRingSkinList;private Func<Vector3D,List<MyPlanet>>_getOverlapGasGiantsAtPosition;private Func<Vector3D,List<MyPlanet>>_getAtmoGasGiantsAtPosition;private Func<Vector3D,float>_getShadowFactor;private Func<MyPlanet,Vector3D,float>_getAtmoDensity;private Func<Vector3D,float>_getAtmoDensityGlobal;private Func<MyPlanet,Vector3D,float>_getRingInfluenceAtPosition;private Func<Vector3D,float>_getRingInfluenceAtPositionGlobal;private Action _forceMainUpdate;private const long Channel=321421229679;public bool IsReady{get;private set;}public bool Compromised{get;private set;}private void HandleMessage(object o){if(_apiInit)return;var dict=o as IReadOnlyDictionary<string,Delegate>;var message=o as string;if(message!=null&&message=="Compromised")Compromised=true;if(dict==null||dict is ImmutableDictionary<string,Delegate>)return;var builder=ImmutableDictionary.CreateBuilder<string,Delegate>();foreach(var pair in dict)builder.Add(pair.Key,pair.Value);MyAPIGateway.Utilities.SendModMessage(Channel,builder.ToImmutable());ApiLoad(dict);IsReady=true;}private bool _isRegistered;public bool Load(){if(!_isRegistered){_isRegistered=true;MyAPIGateway.Utilities.RegisterMessageHandler(Channel,HandleMessage);}if(!IsReady)MyAPIGateway.Utilities.SendModMessage(Channel,"ApiEndpointRequest");return IsReady;}public void Unload(){if(_isRegistered){_isRegistered=false;MyAPIGateway.Utilities.UnregisterMessageHandler(Channel,HandleMessage);}IsReady=false;}public void ApiLoad(IReadOnlyDictionary<string,Delegate>delegates){_apiInit=true;_spawnGasGiant=(Func<Vector3D,float,Vector3I,string,float,float,float,MyPlanet>)delegates["SpawnGasGiant"];_setGasGiantConfig_name=(Func<MyPlanet,string,bool>)delegates["SetGasGiantConfig_Name"];_setGasGiantConfig_basicInfo=(Func<MyPlanet,float,Vector3I,string,float,float,float,bool>)delegates["SetGasGiantConfig_BasicInfo"];_getGasGiantConfig_basicInfo_base=(Func<MyPlanet,MyTuple<bool,float,Vector3I,string,float>>)delegates["GetGasGiantConfig_BasicInfo_Base"];_getGasGiantConfig_basicInfo_gravity=(Func<MyPlanet,MyTuple<bool,float,float>>)delegates["GetGasGiantConfig_BasicInfo_Gravity"];_setGasGiantConfig_atmoInfo=(Func<MyPlanet,float,float,float,bool>)delegates["SetGasGiantConfig_AtmoInfo"];_getGasGiantConfig_atmoInfo=(Func<MyPlanet,MyTuple<bool,float,float,float>>)delegates["GetGasGiantConfig_AtmoInfo"];_setGasGiantConfig_ringInfo=(Func<MyPlanet,bool,string,Vector3D,Vector3I,float,float,float,float,float,float,bool,bool>)delegates["SetGasGiantConfig_RingInfo"];_getGasGiantConfig_ringInfo_base=(Func<MyPlanet,MyTuple<bool,bool,float,bool>>)delegates["GetGasGiantConfig_RingInfo_Base"];_getGasGiantConfig_ringInfo_visual=(Func<MyPlanet,MyTuple<bool,string,Vector3I,float,float>>)delegates["GetGasGiantConfig_RingInfo_Visual"];_getGasGiantConfig_ringInfo_size=(Func<MyPlanet,MyTuple<bool,Vector3D,float,float,float>>)delegates["GetGasGiantConfig_RingInfo_Size"];_setGasGiantConfig_interiorInfo=(Func<MyPlanet,bool,bool,bool,bool>)delegates["SetGasGiantConfig_InteriorInfo"];_getGasGiantConfig_interiorInfo=(Func<MyPlanet,MyTuple<bool,bool,bool,bool>>)delegates["GetGasGiantConfig_InteriorInfo"];_setGasGiantConfig_resourceInfo=(Func<MyPlanet,bool,string,float,string,float,bool,string,float,bool>)delegates["SetGasGiantConfig_ResourceInfo"];_getGasGiantConfig_resourceInfo_planet=(Func<MyPlanet,MyTuple<bool,bool,string,float,string,float>>)delegates["GetGasGiantConfig_ResourceInfo_Planet"];_getGasGiantConfig_resourceInfo_ring=(Func<MyPlanet,MyTuple<bool,bool,string,float>>)delegates["GetGasGiantConfig_ResourceInfo_Ring"];_getGasGiantSkinList=(Func<List<string>>)delegates["GetGasGiantSkinList"];_getGasGiantRingSkinList=(Func<List<string>>)delegates["GetGasGiantRingSkinList"];_getOverlapGasGiantsAtPosition=(Func<Vector3D,List<MyPlanet>>)delegates["GetOverlapGasGiantsAtPosition"];_getAtmoGasGiantsAtPosition=(Func<Vector3D,List<MyPlanet>>)delegates["GetAtmoGasGiantsAtPosition"];_getShadowFactor=(Func<Vector3D,float>)delegates["GetShadowFactor"];_getAtmoDensity=(Func<MyPlanet,Vector3D,float>)delegates["GetAtmoDensity"];_getAtmoDensityGlobal=(Func<Vector3D,float>)delegates["GetAtmoDensityGlobal"];_getRingInfluenceAtPosition=(Func<MyPlanet,Vector3D,float>)delegates["GetRingInfluenceAtPosition"];_getRingInfluenceAtPositionGlobal=(Func<Vector3D,float>)delegates["GetRingInfluenceAtPositionGlobal"];_forceMainUpdate=(Action)delegates["ForceMainUpdate"];}public MyPlanet SpawnGasGiant(Vector3D position,float radius,Vector3I planetColor,string planetSkin,float gravityStrength,float gravityFalloff,float dayLength)=>_spawnGasGiant?.Invoke(position,radius,planetColor,planetSkin,gravityStrength,gravityFalloff,dayLength)??null;public bool SetGasGiantConfig_Name(MyPlanet planet,string name)=>_setGasGiantConfig_name?.Invoke(planet,name)??false;public bool SetGasGiantConfig_BasicInfo(MyPlanet planet,float radius,Vector3I planetColor,string planetSkin,float gravityStrength,float gravityFalloff,float dayLength)=>_setGasGiantConfig_basicInfo?.Invoke(planet,radius,planetColor,planetSkin,gravityStrength,gravityFalloff,dayLength)??false;public MyTuple<bool,float,Vector3I,string,float>GetGasGiantConfig_BasicInfo_Base(MyPlanet planet)=>_getGasGiantConfig_basicInfo_base?.Invoke(planet)??new MyTuple<bool,float,Vector3I,string,float>();public MyTuple<bool,float,float>GetGasGiantConfig_BasicInfo_Gravity(MyPlanet planet)=>_getGasGiantConfig_basicInfo_gravity?.Invoke(planet)??new MyTuple<bool,float,float>();public bool SetGasGiantConfig_AtmoInfo(MyPlanet planet,float airDensity,float oxygenDensity,float windSpeed)=>_setGasGiantConfig_atmoInfo?.Invoke(planet,airDensity,oxygenDensity,windSpeed)??false;public MyTuple<bool,float,float,float>GetGasGiantConfig_AtmoInfo(MyPlanet planet)=>_getGasGiantConfig_atmoInfo?.Invoke(planet)??new MyTuple<bool,float,float,float>();public bool SetGasGiantConfig_RingInfo(MyPlanet planet,bool hasRing,string ringSkin,Vector3D ringNormal,Vector3I ringColor,float ringLightMult,float ringShadowMult,float ringInnerScale,float ringOuterScale,float ringLayerSpacingScale,float ringRotationPeriod,bool constrainNearbyAsteroidsToRing)=>_setGasGiantConfig_ringInfo?.Invoke(planet,hasRing,ringSkin,ringNormal,ringColor,ringLightMult,ringShadowMult,ringInnerScale,ringOuterScale,ringLayerSpacingScale,ringRotationPeriod,constrainNearbyAsteroidsToRing)??false;public MyTuple<bool,bool,float,bool>GetGasGiantConfig_RingInfo_Base(MyPlanet planet)=>_getGasGiantConfig_ringInfo_base?.Invoke(planet)??new MyTuple<bool,bool,float,bool>();public MyTuple<bool,string,Vector3I,float,float>GetGasGiantConfig_RingInfo_Visual(MyPlanet planet)=>_getGasGiantConfig_ringInfo_visual?.Invoke(planet)??new MyTuple<bool,string,Vector3I,float,float>();public MyTuple<bool,Vector3D,float,float,float>GetGasGiantConfig_RingInfo_Size(MyPlanet planet)=>_getGasGiantConfig_ringInfo_size?.Invoke(planet)??new MyTuple<bool,Vector3D,float,float,float>();public bool SetGasGiantConfig_InteriorInfo(MyPlanet planet,bool asteroidRemoval,bool pressureDamagePlayers,bool pressureDamageGrids)=>_setGasGiantConfig_interiorInfo?.Invoke(planet,asteroidRemoval,pressureDamagePlayers,pressureDamageGrids)??false;public MyTuple<bool,bool,bool,bool>GetGasGiantConfig_InteriorInfo(MyPlanet planet)=>_getGasGiantConfig_interiorInfo?.Invoke(planet)??new MyTuple<bool,bool,bool,bool>();public bool SetGasGiantConfig_ResourceInfo(MyPlanet planet,bool collectPlanetResources,string collectResourceUpperSubtypeId,float collectResourceUpperAmount,string collectResourceLowerSubtypeId,float collectResourceLowerAmount,bool collectRingResources,string collectResourceRingSubtypeId,float collectResourceRingAmount)=>_setGasGiantConfig_resourceInfo?.Invoke(planet,collectPlanetResources,collectResourceUpperSubtypeId,collectResourceUpperAmount,collectResourceLowerSubtypeId,collectResourceLowerAmount,collectRingResources,collectResourceRingSubtypeId,collectResourceRingAmount)??false;public MyTuple<bool,bool,string,float,string,float>GetGasGiantConfig_ResourceInfo_Planet(MyPlanet planet)=>_getGasGiantConfig_resourceInfo_planet?.Invoke(planet)??new MyTuple<bool,bool,string,float,string,float>();public MyTuple<bool,bool,string,float>GetGasGiantConfig_ResourceInfo_Ring(MyPlanet planet)=>_getGasGiantConfig_resourceInfo_ring?.Invoke(planet)??new MyTuple<bool,bool,string,float>();public List<string>GetGasGiantSkinList()=>_getGasGiantSkinList?.Invoke()??new List<string>();public List<string>GetGasGiantRingSkinList()=>_getGasGiantRingSkinList?.Invoke()??new List<string>();public List<MyPlanet>GetOverlapGasGiantsAtPosition(Vector3D position)=>_getOverlapGasGiantsAtPosition?.Invoke(position)??new List<MyPlanet>();public List<MyPlanet>GetAtmoGasGiantsAtPosition(Vector3D position)=>_getAtmoGasGiantsAtPosition?.Invoke(position)??new List<MyPlanet>();public float GetShadowFactor(Vector3D position)=>_getShadowFactor?.Invoke(position)??0f;public float GetAtmoDensity(MyPlanet planet,Vector3D position)=>_getAtmoDensity?.Invoke(planet,position)??0f;public float GetAtmoDensityGlobal(Vector3D position)=>_getAtmoDensityGlobal?.Invoke(position)??0f;public float GetRingInfluenceAtPosition(MyPlanet planet,Vector3D position)=>_getRingInfluenceAtPosition?.Invoke(planet,position)??0f;public float GetRingInfluenceAtPositionGlobal(Vector3D position)=>_getRingInfluenceAtPositionGlobal?.Invoke(position)??0f;public void ForceMainUpdate()=>_forceMainUpdate?.Invoke();}}﻿using System;using System.IO;using System.Linq;using Sandbox.Definitions;using Sandbox.Engine.Physics;using Sandbox.Game;using Sandbox.Game.Entities;using Sandbox.ModAPI;using VRage;using VRage.Game;using VRage.Game.Components;using VRage.Game.Entity;using VRage.Game.ModAPI;using VRage.Game.ModAPI.Interfaces;using VRage.ModAPI;using VRage.ObjectBuilders;using VRage.ObjectBuilders.Private;using VRage.Utils;using VRageMath;using CollisionLayers=Sandbox.Engine.Physics.MyPhysics.CollisionLayers;namespace DynamicAsteroids.Data.Scripts.DynamicAsteroids.AsteroidEntities{public enum AsteroidType{Ice,Stone,Iron,Nickel,Cobalt,Magnesium,Silicon,Silver,Gold,Platinum,Uraninite}public class AsteroidEntity:MyEntity,IMyDestroyableObject{private static readonly string[]IceAsteroidModels={@"Models\IceAsteroid_1.mwm",@"Models\IceAsteroid_2.mwm",@"Models\IceAsteroid_3.mwm",@"Models\IceAsteroid_4.mwm"};private static readonly string[]StoneAsteroidModels={@"Models\StoneAsteroid_1.mwm",@"Models\StoneAsteroid_2.mwm",@"Models\StoneAsteroid_3.mwm",@"Models\StoneAsteroid_4.mwm",@"Models\StoneAsteroid_5.mwm",@"Models\StoneAsteroid_6.mwm",@"Models\StoneAsteroid_7.mwm",@"Models\StoneAsteroid_8.mwm",@"Models\StoneAsteroid_9.mwm",@"Models\StoneAsteroid_10.mwm",@"Models\StoneAsteroid_11.mwm",@"Models\StoneAsteroid_12.mwm",@"Models\StoneAsteroid_13.mwm",@"Models\StoneAsteroid_14.mwm",@"Models\StoneAsteroid_15.mwm",@"Models\StoneAsteroid_16.mwm"};private static readonly string[]IronAsteroidModels={@"Models\OreAsteroid_Iron.mwm"};private static readonly string[]NickelAsteroidModels={@"Models\OreAsteroid_Nickel.mwm"};private static readonly string[]CobaltAsteroidModels={@"Models\OreAsteroid_Cobalt.mwm"};private static readonly string[]MagnesiumAsteroidModels={@"Models\OreAsteroid_Magnesium.mwm"};private static readonly string[]SiliconAsteroidModels={@"Models\OreAsteroid_Silicon.mwm"};private static readonly string[]SilverAsteroidModels={@"Models\OreAsteroid_Silver.mwm"};private static readonly string[]GoldAsteroidModels={@"Models\OreAsteroid_Gold.mwm"};private static readonly string[]PlatinumAsteroidModels={@"Models\OreAsteroid_Platinum.mwm"};private static readonly string[]UraniniteAsteroidModels={@"Models\OreAsteroid_Uraninite.mwm"};private void CreateEffects(Vector3D position){MyVisualScriptLogicProvider.CreateParticleEffectAtPosition("roidbreakparticle1",position);MyVisualScriptLogicProvider.PlaySingleSoundAtPosition("roidbreak",position);}public static AsteroidEntity CreateAsteroid(Vector3D position,float size,Vector3D initialVelocity,AsteroidType type,Quaternion?rotation=null,long?entityId=null){var ent=new AsteroidEntity();Log.Info($"Creating AsteroidEntity at Position: {position}, Size: {size}, InitialVelocity: {initialVelocity}, Type: {type}");if(entityId.HasValue){ent.EntityId=entityId.Value;}try{ent.Init(position,size,initialVelocity,type,rotation);}catch(Exception ex){Log.Exception(ex,typeof(AsteroidEntity),"Failed to initialize AsteroidEntity");return null;}if(ent.EntityId==0){Log.Warning("EntityId is 0, which is invalid!");return null;}return ent;}private void Init(Vector3D position,float size,Vector3D initialVelocity,AsteroidType type,Quaternion?rotation){Log.Info($"AsteroidEntity.Init called with position: {position}, size: {size}, initialVelocity: {initialVelocity}, type: {type}");try{if(MainSession.I==null){Log.Exception(new Exception("MainSession.I is null"),typeof(AsteroidEntity),"MainSession.I is not initialized.");return;}Log.Info("MainSession.I is initialized.");if(MainSession.I.ModContext==null){Log.Exception(new Exception("MainSession.I.ModContext is null"),typeof(AsteroidEntity),"MainSession.I.ModContext is not initialized.");return;}Log.Info("MainSession.I.ModContext is initialized.");string modPath=MainSession.I.ModContext.ModPath;if(string.IsNullOrEmpty(modPath)){Log.Exception(new Exception("MainSession.I.ModContext.ModPath is null or empty"),typeof(AsteroidEntity),"MainSession.I.ModContext.ModPath is not initialized.");return;}Log.Info($"ModPath: {modPath}");if(MainSession.I.Rand==null){Log.Exception(new Exception("MainSession.I.Rand is null"),typeof(AsteroidEntity),"Random number generator is not initialized.");return;}Type=type;Log.Info($"Asteroid Type: {type}");switch(type){case AsteroidType.Ice:if(IceAsteroidModels.Length==0){Log.Info("IceAsteroidModels array is empty");}else{int modelIndex=MainSession.I.Rand.Next(IceAsteroidModels.Length);Log.Info($"Selected model index for Ice: {modelIndex}");ModelString=Path.Combine(modPath,IceAsteroidModels[modelIndex]);}break;case AsteroidType.Stone:if(StoneAsteroidModels.Length==0){Log.Info("StoneAsteroidModels array is empty");}else{int modelIndex=MainSession.I.Rand.Next(StoneAsteroidModels.Length);Log.Info($"Selected model index for Stone: {modelIndex}");ModelString=Path.Combine(modPath,StoneAsteroidModels[modelIndex]);}break;case AsteroidType.Iron:if(IronAsteroidModels.Length==0){Log.Info("IronAsteroidModels array is empty");}else{int modelIndex=MainSession.I.Rand.Next(IronAsteroidModels.Length);Log.Info($"Selected model index for Iron: {modelIndex}");ModelString=Path.Combine(modPath,IronAsteroidModels[modelIndex]);}break;case AsteroidType.Nickel:if(NickelAsteroidModels.Length==0){Log.Info("NickelAsteroidModels array is empty");}else{int modelIndex=MainSession.I.Rand.Next(NickelAsteroidModels.Length);Log.Info($"Selected model index for Nickel: {modelIndex}");ModelString=Path.Combine(modPath,NickelAsteroidModels[modelIndex]);}break;case AsteroidType.Cobalt:if(CobaltAsteroidModels.Length==0){Log.Info("CobaltAsteroidModels array is empty");}else{int modelIndex=MainSession.I.Rand.Next(CobaltAsteroidModels.Length);Log.Info($"Selected model index for Cobalt: {modelIndex}");ModelString=Path.Combine(modPath,CobaltAsteroidModels[modelIndex]);}break;case AsteroidType.Magnesium:if(MagnesiumAsteroidModels.Length==0){Log.Info("MagnesiumAsteroidModels array is empty");}else{int modelIndex=MainSession.I.Rand.Next(MagnesiumAsteroidModels.Length);Log.Info($"Selected model index for Magnesium: {modelIndex}");ModelString=Path.Combine(modPath,MagnesiumAsteroidModels[modelIndex]);}break;case AsteroidType.Silicon:if(SiliconAsteroidModels.Length==0){Log.Info("SiliconAsteroidModels array is empty");}else{int modelIndex=MainSession.I.Rand.Next(SiliconAsteroidModels.Length);Log.Info($"Selected model index for Silicon: {modelIndex}");ModelString=Path.Combine(modPath,SiliconAsteroidModels[modelIndex]);}break;case AsteroidType.Silver:if(SilverAsteroidModels.Length==0){Log.Info("SilverAsteroidModels array is empty");}else{int modelIndex=MainSession.I.Rand.Next(SilverAsteroidModels.Length);Log.Info($"Selected model index for Silver: {modelIndex}");ModelString=Path.Combine(modPath,SilverAsteroidModels[modelIndex]);}break;case AsteroidType.Gold:if(GoldAsteroidModels.Length==0){Log.Info("GoldAsteroidModels array is empty");}else{int modelIndex=MainSession.I.Rand.Next(GoldAsteroidModels.Length);Log.Info($"Selected model index for Gold: {modelIndex}");ModelString=Path.Combine(modPath,GoldAsteroidModels[modelIndex]);}break;case AsteroidType.Platinum:if(PlatinumAsteroidModels.Length==0){Log.Info("PlatinumAsteroidModels array is empty");}else{int modelIndex=MainSession.I.Rand.Next(PlatinumAsteroidModels.Length);Log.Info($"Selected model index for Platinum: {modelIndex}");ModelString=Path.Combine(modPath,PlatinumAsteroidModels[modelIndex]);}break;case AsteroidType.Uraninite:if(UraniniteAsteroidModels.Length==0){Log.Info("UraniniteAsteroidModels array is empty");}else{int modelIndex=MainSession.I.Rand.Next(UraniniteAsteroidModels.Length);Log.Info($"Selected model index for Uraninite: {modelIndex}");ModelString=Path.Combine(modPath,UraniniteAsteroidModels[modelIndex]);}break;default:Log.Info("Invalid AsteroidType, setting ModelString to empty.");ModelString="";break;}Log.Info($"ModelString: {ModelString}");if(string.IsNullOrEmpty(ModelString)){Log.Exception(new Exception("ModelString is null or empty"),typeof(AsteroidEntity),"Failed to initialize asteroid entity");return;}Size=size;_integrity=AsteroidSettings.BaseIntegrity*Size;Log.Info($"Base Integrity: {AsteroidSettings.BaseIntegrity}, Size: {Size}, Total Integrity: {_integrity}");Log.Info($"Attempting to load model: {ModelString}");Init(null,ModelString,null,Size);Save=false;NeedsWorldMatrix=true;Log.Info("Setting WorldMatrix");if(rotation.HasValue){WorldMatrix=MatrixD.CreateFromQuaternion(rotation.Value)*MatrixD.CreateWorld(position,Vector3D.Forward,Vector3D.Up);}else{var randomRotation=MatrixD.CreateFromQuaternion(Quaternion.CreateFromYawPitchRoll((float)MainSession.I.Rand.NextDouble()*MathHelper.TwoPi,(float)MainSession.I.Rand.NextDouble()*MathHelper.TwoPi,(float)MainSession.I.Rand.NextDouble()*MathHelper.TwoPi));WorldMatrix=randomRotation*MatrixD.CreateWorld(position,Vector3D.Forward,Vector3D.Up);}WorldMatrix.Orthogonalize();Log.Info($"WorldMatrix: {WorldMatrix}");Log.Info("Adding entity to MyEntities");MyEntities.Add(this);Log.Info($"{(MyAPIGateway.Session.IsServer?"Server":"Client")}: Added asteroid entity with ID {EntityId} to MyEntities");Log.Info("Creating physics");CreatePhysics();Physics.LinearVelocity=initialVelocity+RandVector()*AsteroidSettings.VelocityVariability;Physics.AngularVelocity=RandVector()*AsteroidSettings.GetRandomAngularVelocity(MainSession.I.Rand);Log.Info($"Initial LinearVelocity: {Physics.LinearVelocity}, Initial AngularVelocity: {Physics.AngularVelocity}");Log.Info($"Asteroid model {ModelString} loaded successfully with initial angular velocity: {Physics.AngularVelocity}");if(MyAPIGateway.Session.IsServer){SyncFlag=true;}}catch(Exception ex){Log.Info($"Exception Type: {ex.GetType()}");Log.Info($"Exception Message: {ex.Message}");Log.Info($"Exception Stack Trace: {ex.StackTrace}");if(ex.InnerException!=null){Log.Info($"Inner Exception Type: {ex.InnerException.GetType()}");Log.Info($"Inner Exception Message: {ex.InnerException.Message}");Log.Info($"Inner Exception Stack Trace: {ex.InnerException.StackTrace}");}Log.Exception(ex,typeof(AsteroidEntity),$"Failed to load model: {ModelString}");Flags&=~EntityFlags.Visible;}}public float Size;public string ModelString="";public AsteroidType Type;public void SplitAsteroid(){if(!MyAPIGateway.Session.IsServer)return;int splits=MainSession.I.Rand.Next(2,5);if(splits>Size)splits=(int)Math.Ceiling(Size);float newSize=Size/splits;CreateEffects(PositionComp.GetPosition());if(newSize<=AsteroidSettings.MinSubChunkSize){MyPhysicalItemDefinition item=MyDefinitionManager.Static.GetPhysicalItemDefinition(new MyDefinitionId(typeof(MyObjectBuilder_Ore),Type.ToString()));var newObject=MyObjectBuilderSerializer.CreateNewObject(item.Id.TypeId,item.Id.SubtypeId.ToString())as MyObjectBuilder_PhysicalObject;for(int i=0;i<splits;i++){int dropAmount=GetRandomDropAmount(Type);MyFloatingObjects.Spawn(new MyPhysicalInventoryItem(dropAmount,newObject),PositionComp.GetPosition()+RandVector()*Size,Vector3D.Forward,Vector3D.Up,Physics);}var removalMessage=new AsteroidNetworkMessage(PositionComp.GetPosition(),Size,Vector3D.Zero,Vector3D.Zero,Type,false,EntityId,true,false,Quaternion.Identity);var removalMessageBytes=MyAPIGateway.Utilities.SerializeToBinary(removalMessage);MyAPIGateway.Multiplayer.SendMessageToOthers(32000,removalMessageBytes);MainSession.I._spawner._asteroids.Remove(this);Close();return;}for(int i=0;i<splits;i++){Vector3D newPos=PositionComp.GetPosition()+RandVector()*Size;Vector3D newVelocity=RandVector()*AsteroidSettings.GetRandomSubChunkVelocity(MainSession.I.Rand);Vector3D newAngularVelocity=RandVector()*AsteroidSettings.GetRandomSubChunkAngularVelocity(MainSession.I.Rand);Quaternion newRotation=Quaternion.CreateFromYawPitchRoll((float)MainSession.I.Rand.NextDouble()*MathHelper.TwoPi,(float)MainSession.I.Rand.NextDouble()*MathHelper.TwoPi,(float)MainSession.I.Rand.NextDouble()*MathHelper.TwoPi);var subChunk=CreateAsteroid(newPos,newSize,newVelocity,Type,newRotation);subChunk.Physics.AngularVelocity=newAngularVelocity;MainSession.I._spawner._asteroids.Add(subChunk);var message=new AsteroidNetworkMessage(newPos,newSize,newVelocity,newAngularVelocity,Type,true,subChunk.EntityId,false,true,newRotation);var messageBytes=MyAPIGateway.Utilities.SerializeToBinary(message);MyAPIGateway.Multiplayer.SendMessageToOthers(32000,messageBytes);}var finalRemovalMessage=new AsteroidNetworkMessage(PositionComp.GetPosition(),Size,Vector3D.Zero,Vector3D.Zero,Type,false,EntityId,true,false,Quaternion.Identity);var finalRemovalMessageBytes=MyAPIGateway.Utilities.SerializeToBinary(finalRemovalMessage);MyAPIGateway.Multiplayer.SendMessageToOthers(32000,finalRemovalMessageBytes);MainSession.I._spawner._asteroids.Remove(this);Close();}private int GetRandomDropAmount(AsteroidType type){switch(type){case AsteroidType.Ice:return MainSession.I.Rand.Next(AsteroidSettings.IceDropRange[0],AsteroidSettings.IceDropRange[1]);case AsteroidType.Stone:return MainSession.I.Rand.Next(AsteroidSettings.StoneDropRange[0],AsteroidSettings.StoneDropRange[1]);case AsteroidType.Iron:return MainSession.I.Rand.Next(AsteroidSettings.IronDropRange[0],AsteroidSettings.IronDropRange[1]);case AsteroidType.Nickel:return MainSession.I.Rand.Next(AsteroidSettings.NickelDropRange[0],AsteroidSettings.NickelDropRange[1]);case AsteroidType.Cobalt:return MainSession.I.Rand.Next(AsteroidSettings.CobaltDropRange[0],AsteroidSettings.CobaltDropRange[1]);case AsteroidType.Magnesium:return MainSession.I.Rand.Next(AsteroidSettings.MagnesiumDropRange[0],AsteroidSettings.MagnesiumDropRange[1]);case AsteroidType.Silicon:return MainSession.I.Rand.Next(AsteroidSettings.SiliconDropRange[0],AsteroidSettings.SiliconDropRange[1]);case AsteroidType.Silver:return MainSession.I.Rand.Next(AsteroidSettings.SilverDropRange[0],AsteroidSettings.SilverDropRange[1]);case AsteroidType.Gold:return MainSession.I.Rand.Next(AsteroidSettings.GoldDropRange[0],AsteroidSettings.GoldDropRange[1]);case AsteroidType.Platinum:return MainSession.I.Rand.Next(AsteroidSettings.PlatinumDropRange[0],AsteroidSettings.PlatinumDropRange[1]);case AsteroidType.Uraninite:return MainSession.I.Rand.Next(AsteroidSettings.UraniniteDropRange[0],AsteroidSettings.UraniniteDropRange[1]);default:return 0;}}public void OnDestroy(){try{SplitAsteroid();}catch(Exception ex){Log.Exception(ex,typeof(AsteroidEntity),"Exception in OnDestroy:");throw;}}public bool UseDamageSystem=>true;public float Integrity=>_integrity;public float _integrity;public bool DoDamage(float damage,MyStringHash damageSource,bool sync,MyHitInfo?hitInfo=null,long attackerId=0,long realHitEntityId=0,bool shouldDetonateAmmo=true,MyStringHash?extraInfo=null){try{ReduceIntegrity(damage,damageSource);if(_integrity<=0){OnDestroy();}return true;}catch(Exception ex){Log.Exception(ex,typeof(AsteroidEntity),"Exception in DoDamage");return false;}}public void ReduceIntegrity(float damage,MyStringHash damageSource){float finalDamage=damage;if(damageSource.String=="Explosion"){finalDamage*=10.0f;Log.Info($"Explosion detected! Applying 10x damage multiplier. Original Damage: {damage}, Final Damage: {finalDamage}");}else{Log.Info($"Non-explosion damage type. Original Damage: {damage}");}_integrity-=finalDamage;Log.Info($"Integrity reduced by {finalDamage}, new integrity: {_integrity}");if(_integrity<=0){Log.Info("Integrity below or equal to 0, calling OnDestroy");OnDestroy();}}private void CreatePhysics(){float radius=Size/2;float volume=4.0f/3.0f*(float)Math.PI*(radius*radius*radius);float density=917.0f;float mass=density*volume;PhysicsSettings settings=MyAPIGateway.Physics.CreateSettingsForPhysics(this,WorldMatrix,Vector3.Zero,linearDamping:0f,angularDamping:0f,rigidBodyFlags:RigidBodyFlag.RBF_DEFAULT,collisionLayer:CollisionLayers.NoVoxelCollisionLayer,isPhantom:false,mass:new ModAPIMass(volume,mass,Vector3.Zero,mass*PositionComp.LocalAABB.Height*PositionComp.LocalAABB.Height/6*Matrix.Identity));MyAPIGateway.Physics.CreateSpherePhysics(settings,radius);Physics.Enabled=true;Physics.Activate();}private Vector3D RandVector(){var theta=MainSession.I.Rand.NextDouble()*2.0*Math.PI;var phi=Math.Acos(2.0*MainSession.I.Rand.NextDouble()-1.0);var sinPhi=Math.Sin(phi);return Math.Pow(MainSession.I.Rand.NextDouble(),1/3d)*new Vector3D(sinPhi*Math.Cos(theta),sinPhi*Math.Sin(theta),Math.Cos(phi));}}}﻿using System;using System.IO;using Sandbox.ModAPI;using VRageMath;using System.Collections.Generic;using System.Linq;namespace DynamicAsteroids.Data.Scripts.DynamicAsteroids.AsteroidEntities{public static class AsteroidSettings{public static bool EnableLogging=false;public static bool EnablePersistence=false;public static bool EnableMiddleMouseAsteroidSpawn=false;public static bool EnableVanillaAsteroidSpawnLatching=false;public static bool EnableGasGiantRingSpawning=false;public static float MinimumRingInfluenceForSpawn=0.1f;public static double RingAsteroidVelocityBase=50.0;public static float MaxRingAsteroidDensityMultiplier=1f;public static double VanillaAsteroidSpawnLatchingRadius=10000;public static bool DisableZoneWhileMovingFast=true;public static double ZoneSpeedThreshold=2000.0;public static int SaveStateInterval=600;public static int NetworkMessageInterval=120;public static int SpawnInterval=6;public static int UpdateInterval=120;public static int MaxAsteroidCount=20000;public static int MaxAsteroidsPerZone=100;public static int MaxTotalAttempts=100;public static int MaxZoneAttempts=50;public static double ZoneRadius=10000.0;public static int AsteroidVelocityBase=0;public static double VelocityVariability=0;public static double AngularVelocityVariability=0;public static double MinDistanceFromVanillaAsteroids=1000;public static double MinDistanceFromPlayer=3000;public static int Seed=69420;public static bool IgnorePlanets=true;public static double IceWeight=99;public static double StoneWeight=0.5;public static double IronWeight=0.25;public static double NickelWeight=0.05;public static double CobaltWeight=0.05;public static double MagnesiumWeight=0.05;public static double SiliconWeight=0.05;public static double SilverWeight=0.05;public static double GoldWeight=0.05;public static double PlatinumWeight=0.05;public static double UraniniteWeight=0.05;public static float BaseIntegrity=1f;public static float MinAsteroidSize=50f;public static float MaxAsteroidSize=250f;public static float MinSubChunkSize=5f;public static double SubChunkVelocityMin=1.0;public static double SubChunkVelocityMax=5.0;public static double SubChunkAngularVelocityMin=0.01;public static double SubChunkAngularVelocityMax=0.1;public static int[]IceDropRange={1000,10000};public static int[]StoneDropRange={1000,10000};public static int[]IronDropRange={500,2500};public static int[]NickelDropRange={500,2500};public static int[]CobaltDropRange={500,2500};public static int[]MagnesiumDropRange={500,2500};public static int[]SiliconDropRange={500,2500};public static int[]SilverDropRange={500,2500};public static int[]GoldDropRange={500,2500};public static int[]PlatinumDropRange={500,2500};public static int[]UraniniteDropRange={500,2500};public static List<SpawnableArea>ValidSpawnLocations=new List<SpawnableArea>();public static bool CanSpawnAsteroidAtPoint(Vector3D point,out Vector3D velocity,bool isInRing=false){if(isInRing){velocity=Vector3D.Zero;return true;}foreach(var area in ValidSpawnLocations){if(area.ContainsPoint(point)){velocity=area.VelocityAtPoint(point);return true;}}velocity=Vector3D.Zero;return false;}private static Random rand=new Random(Seed);public static AsteroidType GetAsteroidType(Vector3D position){double totalWeight=IceWeight+StoneWeight+IronWeight+NickelWeight+CobaltWeight+MagnesiumWeight+SiliconWeight+SilverWeight+GoldWeight+PlatinumWeight+UraniniteWeight;double randomValue=rand.NextDouble()*totalWeight;if(randomValue<IceWeight)return AsteroidType.Ice;randomValue-=IceWeight;if(randomValue<StoneWeight)return AsteroidType.Stone;randomValue-=StoneWeight;if(randomValue<IronWeight)return AsteroidType.Iron;randomValue-=IronWeight;if(randomValue<NickelWeight)return AsteroidType.Nickel;randomValue-=NickelWeight;if(randomValue<CobaltWeight)return AsteroidType.Cobalt;randomValue-=CobaltWeight;if(randomValue<MagnesiumWeight)return AsteroidType.Magnesium;randomValue-=MagnesiumWeight;if(randomValue<SiliconWeight)return AsteroidType.Silicon;randomValue-=SiliconWeight;if(randomValue<SilverWeight)return AsteroidType.Silver;randomValue-=SilverWeight;if(randomValue<GoldWeight)return AsteroidType.Gold;randomValue-=GoldWeight;if(randomValue<PlatinumWeight)return AsteroidType.Platinum;return AsteroidType.Uraninite;}public static float GetAsteroidSize(Vector3D position){Random rand=new Random(Seed+position.GetHashCode());return MinAsteroidSize+(float)rand.NextDouble()*(MaxAsteroidSize-MinAsteroidSize);}public static double GetRandomAngularVelocity(Random rand){return AngularVelocityVariability*rand.NextDouble();}public static double GetRandomSubChunkVelocity(Random rand){return SubChunkVelocityMin+rand.NextDouble()*(SubChunkVelocityMax-SubChunkVelocityMin);}public static double GetRandomSubChunkAngularVelocity(Random rand){return SubChunkAngularVelocityMin+rand.NextDouble()*(SubChunkAngularVelocityMax-SubChunkAngularVelocityMin);}public static void SaveSettings(){try{using(var writer=MyAPIGateway.Utilities.WriteFileInWorldStorage("AsteroidSettings.cfg",typeof(AsteroidSettings))){writer.WriteLine("[General]");writer.WriteLine($"EnableLogging={EnableLogging}");writer.WriteLine($"EnablePersistence={EnablePersistence}");writer.WriteLine($"EnableMiddleMouseAsteroidSpawn={EnableMiddleMouseAsteroidSpawn}");writer.WriteLine($"EnableVanillaAsteroidSpawnLatching={EnableVanillaAsteroidSpawnLatching}");writer.WriteLine($"VanillaAsteroidSpawnLatchingRadius={VanillaAsteroidSpawnLatchingRadius}");writer.WriteLine("[GasGiantIntegration]");writer.WriteLine($"EnableGasGiantRingSpawning={EnableGasGiantRingSpawning}");writer.WriteLine($"DisableZoneWhileMovingFast={DisableZoneWhileMovingFast}");writer.WriteLine($"ZoneSpeedThreshold={ZoneSpeedThreshold}");writer.WriteLine($"SaveStateInterval={SaveStateInterval}");writer.WriteLine($"NetworkMessageInterval={NetworkMessageInterval}");writer.WriteLine($"SpawnInterval={SpawnInterval}");writer.WriteLine($"UpdateInterval={UpdateInterval}");writer.WriteLine($"MaxAsteroidCount={MaxAsteroidCount}");writer.WriteLine($"MaxAsteroidsPerZone={MaxAsteroidsPerZone}");writer.WriteLine($"MaxTotalAttempts={MaxTotalAttempts}");writer.WriteLine($"MaxZoneAttempts={MaxZoneAttempts}");writer.WriteLine($"ZoneRadius={ZoneRadius}");writer.WriteLine($"AsteroidVelocityBase={AsteroidVelocityBase}");writer.WriteLine($"VelocityVariability={VelocityVariability}");writer.WriteLine($"AngularVelocityVariability={AngularVelocityVariability}");writer.WriteLine($"MinDistanceFromVanillaAsteroids={MinDistanceFromVanillaAsteroids}");writer.WriteLine($"MinDistanceFromPlayer={MinDistanceFromPlayer}");writer.WriteLine($"Seed={Seed}");writer.WriteLine($"IgnorePlanets={IgnorePlanets}");writer.WriteLine("[Weights]");writer.WriteLine($"IceWeight={IceWeight}");writer.WriteLine($"StoneWeight={StoneWeight}");writer.WriteLine($"IronWeight={IronWeight}");writer.WriteLine($"NickelWeight={NickelWeight}");writer.WriteLine($"CobaltWeight={CobaltWeight}");writer.WriteLine($"MagnesiumWeight={MagnesiumWeight}");writer.WriteLine($"SiliconWeight={SiliconWeight}");writer.WriteLine($"SilverWeight={SilverWeight}");writer.WriteLine($"GoldWeight={GoldWeight}");writer.WriteLine($"PlatinumWeight={PlatinumWeight}");writer.WriteLine($"UraniniteWeight={UraniniteWeight}");writer.WriteLine("[AsteroidSize]");writer.WriteLine($"BaseIntegrity={BaseIntegrity}");writer.WriteLine($"MinAsteroidSize={MinAsteroidSize}");writer.WriteLine($"MaxAsteroidSize={MaxAsteroidSize}");writer.WriteLine($"MinSubChunkSize={MinSubChunkSize}");writer.WriteLine("[SubChunkVelocity]");writer.WriteLine($"SubChunkVelocityMin={SubChunkVelocityMin}");writer.WriteLine($"SubChunkVelocityMax={SubChunkVelocityMax}");writer.WriteLine($"SubChunkAngularVelocityMin={SubChunkAngularVelocityMin}");writer.WriteLine($"SubChunkAngularVelocityMax={SubChunkAngularVelocityMax}");writer.WriteLine("[DropRanges]");WriteIntArray(writer,"IceDropRange",IceDropRange);WriteIntArray(writer,"StoneDropRange",StoneDropRange);WriteIntArray(writer,"IronDropRange",IronDropRange);WriteIntArray(writer,"NickelDropRange",NickelDropRange);WriteIntArray(writer,"CobaltDropRange",CobaltDropRange);WriteIntArray(writer,"MagnesiumDropRange",MagnesiumDropRange);WriteIntArray(writer,"SiliconDropRange",SiliconDropRange);WriteIntArray(writer,"SilverDropRange",SilverDropRange);WriteIntArray(writer,"GoldDropRange",GoldDropRange);WriteIntArray(writer,"PlatinumDropRange",PlatinumDropRange);WriteIntArray(writer,"UraniniteDropRange",UraniniteDropRange);writer.WriteLine("[SpawnableAreas]");foreach(var area in ValidSpawnLocations){writer.WriteLine($"Name={area.Name}");writer.WriteLine($"CenterPosition={area.CenterPosition.X},{area.CenterPosition.Y},{area.CenterPosition.Z}");writer.WriteLine($"Radius={area.Radius}");}}}catch(Exception ex){Log.Exception(ex,typeof(AsteroidSettings),"Failed to save asteroid settings");}}public static void LoadSettings(){try{if(MyAPIGateway.Utilities.FileExistsInWorldStorage("AsteroidSettings.cfg",typeof(AsteroidSettings))){using(var reader=MyAPIGateway.Utilities.ReadFileInWorldStorage("AsteroidSettings.cfg",typeof(AsteroidSettings))){string line;SpawnableArea currentArea=null;while((line=reader.ReadLine())!=null){if(line.StartsWith("[")||string.IsNullOrWhiteSpace(line))continue;var parts=line.Split('=');if(parts.Length!=2)continue;var key=parts[0].Trim();var value=parts[1].Trim();switch(key){case"EnableLogging":EnableLogging=bool.Parse(value);break;case"EnablePersistence":EnablePersistence=bool.Parse(value);break;case"EnableMiddleMouseAsteroidSpawn":EnableMiddleMouseAsteroidSpawn=bool.Parse(value);break;case"EnableVanillaAsteroidSpawnLatching":EnableVanillaAsteroidSpawnLatching=bool.Parse(value);break;case"VanillaAsteroidSpawnLatchingRadius":VanillaAsteroidSpawnLatchingRadius=double.Parse(value);break;case"EnableGasGiantRingSpawning":EnableGasGiantRingSpawning=bool.Parse(value);break;case"DisableZoneWhileMovingFast":DisableZoneWhileMovingFast=bool.Parse(value);break;case"ZoneSpeedThreshold":ZoneSpeedThreshold=double.Parse(value);break;case"SaveStateInterval":SaveStateInterval=int.Parse(value);break;case"NetworkMessageInterval":NetworkMessageInterval=int.Parse(value);break;case"SpawnInterval":SpawnInterval=int.Parse(value);break;case"UpdateInterval":UpdateInterval=int.Parse(value);break;case"MaxAsteroidCount":MaxAsteroidCount=int.Parse(value);break;case"MaxAsteroidsPerZone":MaxAsteroidsPerZone=int.Parse(value);break;case"MaxTotalAttempts":MaxTotalAttempts=int.Parse(value);break;case"MaxZoneAttempts":MaxZoneAttempts=int.Parse(value);break;case"ZoneRadius":ZoneRadius=double.Parse(value);break;case"AsteroidVelocityBase":AsteroidVelocityBase=int.Parse(value);break;case"VelocityVariability":VelocityVariability=double.Parse(value);break;case"AngularVelocityVariability":AngularVelocityVariability=double.Parse(value);break;case"MinDistanceFromVanillaAsteroids":MinDistanceFromVanillaAsteroids=double.Parse(value);break;case"MinDistanceFromPlayer":MinDistanceFromPlayer=double.Parse(value);break;case"Seed":Seed=int.Parse(value);break;case"IgnorePlanets":IgnorePlanets=bool.Parse(value);break;case"IceWeight":IceWeight=double.Parse(value);break;case"StoneWeight":StoneWeight=double.Parse(value);break;case"IronWeight":IronWeight=double.Parse(value);break;case"NickelWeight":NickelWeight=double.Parse(value);break;case"CobaltWeight":CobaltWeight=double.Parse(value);break;case"MagnesiumWeight":MagnesiumWeight=double.Parse(value);break;case"SiliconWeight":SiliconWeight=double.Parse(value);break;case"SilverWeight":SilverWeight=double.Parse(value);break;case"GoldWeight":GoldWeight=double.Parse(value);break;case"PlatinumWeight":PlatinumWeight=double.Parse(value);break;case"UraniniteWeight":UraniniteWeight=double.Parse(value);break;case"BaseIntegrity":BaseIntegrity=float.Parse(value);break;case"MinAsteroidSize":MinAsteroidSize=float.Parse(value);break;case"MaxAsteroidSize":MaxAsteroidSize=float.Parse(value);break;case"MinSubChunkSize":MinSubChunkSize=float.Parse(value);break;case"SubChunkVelocityMin":SubChunkVelocityMin=double.Parse(value);break;case"SubChunkVelocityMax":SubChunkVelocityMax=double.Parse(value);break;case"SubChunkAngularVelocityMin":SubChunkAngularVelocityMin=double.Parse(value);break;case"SubChunkAngularVelocityMax":SubChunkAngularVelocityMax=double.Parse(value);break;case"IceDropRange":IceDropRange=ReadIntArray(value);break;case"StoneDropRange":StoneDropRange=ReadIntArray(value);break;case"IronDropRange":IronDropRange=ReadIntArray(value);break;case"NickelDropRange":NickelDropRange=ReadIntArray(value);break;case"CobaltDropRange":CobaltDropRange=ReadIntArray(value);break;case"MagnesiumDropRange":MagnesiumDropRange=ReadIntArray(value);break;case"SiliconDropRange":SiliconDropRange=ReadIntArray(value);break;case"SilverDropRange":SilverDropRange=ReadIntArray(value);break;case"GoldDropRange":GoldDropRange=ReadIntArray(value);break;case"PlatinumDropRange":PlatinumDropRange=ReadIntArray(value);break;case"UraniniteDropRange":UraniniteDropRange=ReadIntArray(value);break;case"Name":if(currentArea!=null)ValidSpawnLocations.Add(currentArea);currentArea=new SpawnableArea{Name=value};break;case"CenterPosition":var coords=value.Split(',');currentArea.CenterPosition=new Vector3D(double.Parse(coords[0]),double.Parse(coords[1]),double.Parse(coords[2]));break;case"Radius":currentArea.Radius=double.Parse(value);break;}}if(currentArea!=null)ValidSpawnLocations.Add(currentArea);}}else{ValidSpawnLocations.Add(new SpawnableArea{Name="DefaultArea",CenterPosition=new Vector3D(0.0,0.0,0.0),Radius=0});SaveSettings();}}catch(Exception ex){Log.Exception(ex,typeof(AsteroidSettings),"Failed to load asteroid settings");}}private static void WriteIntArray(TextWriter writer,string key,int[]array){writer.WriteLine($"{key}={string.Join(",",array)}");}private static int[]ReadIntArray(string value){var parts=value.Split(',');var array=new int[parts.Length];for(int i=0;i<parts.Length;i++){array[i]=int.Parse(parts[i]);}return array;}public static void AddSpawnableArea(string name,Vector3D center,double radius){ValidSpawnLocations.Add(new SpawnableArea{Name=name,CenterPosition=center,Radius=radius});SaveSettings();}public static void RemoveSpawnableArea(string name){var area=ValidSpawnLocations.FirstOrDefault(a=>a.Name.Equals(name,StringComparison.OrdinalIgnoreCase));if(area!=null){ValidSpawnLocations.Remove(area);SaveSettings();}}}public class SpawnableArea{public string Name{get;set;}public Vector3D CenterPosition{get;set;}public double Radius{get;set;}public bool ContainsPoint(Vector3D point){double distanceSquared=(point-CenterPosition).LengthSquared();return distanceSquared<=Radius*Radius;}public Vector3D VelocityAtPoint(Vector3D point){return(point-CenterPosition).Normalized()*AsteroidSettings.AsteroidVelocityBase;}}}
